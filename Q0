import scipy
import scipy.io as sio
import numpy as np
from NaiveBayes import *

dataStruct = sio.loadmat('BreastCancerData.mat')
data = dataStruct['X']
dataSize = np.shape(data)
label = dataStruct['y']

randIdx = np.random.permutation(dataSize[1])

trainSetSize = int(np.floor(dataSize[1] / 5))
trainSet = []
sumTrain = 0
for index in randIdx[:trainSetSize]:
    trainSet.append((data[:, index], label[index]))
    sumTrain += label[index]

trainPercent = sumTrain / trainSetSize

testSet = []
sumTest = 0
for index in randIdx[trainSetSize:]:
    testSet.append((data[: index], label[index]))
    sumTest += label[index]
testPercent = sumTest / (dataSize[1] - trainSetSize)

train_data = [data for data, label in trainSet]
train_label = [label for data, label in trainSet]

cluster_sizes, mu, sigma = trainNaiveBayes(train_data, 2, train_label)

our_classification = BinaryClassification(train_data, cluster_sizes, mu, sigma)
